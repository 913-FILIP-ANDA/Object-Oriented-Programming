        -:    0:Source:C:/Users/User/Desktop/lab4/Vector/DynamicArray.cpp
        -:    0:Graph:C:\Users\User\Desktop\lab4\cmake-build-debug-coverage\CMakeFiles\lab4.dir\Vector\DynamicArray.cpp.gcno
        -:    0:Data:C:\Users\User\Desktop\lab4\cmake-build-debug-coverage\CMakeFiles\lab4.dir\Vector\DynamicArray.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by User on 3/19/2021.
        -:    3://
        -:    4:
        -:    5:#include "DynamicArray.h"
        -:    6:#include "../AppException.h"
        -:    7:
        -:    8:
        -:    9:#define INITIAL_CAPACITY 50
        -:   10:#define EMPTY_LIST_COUNT 0
        -:   11:#define FIRST_INDEX 0
        -:   12:
        -:   13:// Constructor
       14:   14:DynamicArray::DynamicArray()
       14:   14-block  0
        -:   15:{
       14:   16:    Capacity = INITIAL_CAPACITY;
       14:   17:    Count = EMPTY_LIST_COUNT;
       14:   18:    Storage = new TrenchCoat*[Capacity];
       14:   18-block  0
       14:   18-block  1
    $$$$$:   18-block  2
       14:   18-block  3
       14:   19:}
        -:   20:
        -:   21:// Destructor
        8:   22:DynamicArray::~DynamicArray()
        8:   22-block  0
        -:   23:{
      251:   24:    for (int i = FIRST_INDEX; i < Count; i++)
        8:   24-block  0
      251:   24-block  1
      243:   24-block  2
      243:   25:        delete Storage[i];
      243:   25-block  0
      243:   25-block  1
        8:   26:    delete Storage;
        8:   26-block  0
        8:   27:}
        -:   28:
        -:   29:// Add an element at the end of the list
      486:   30:void DynamicArray::Push(TrenchCoat* SomeTrenchCoat)
      486:   30-block  0
        -:   31:{
      486:   32:    Storage[Count++] = SomeTrenchCoat;
      486:   33:    if (Count == Capacity)
      486:   33-block  0
        8:   34:        Grow();
        8:   34-block  0
      486:   35:}
        -:   36:
        -:   37:// Pop the element from the end of the list (return and remove)
        1:   38:TrenchCoat* DynamicArray::Pop()
        1:   38-block  0
        -:   39:{
        1:   40:    TrenchCoat* PoppedElement = Storage[Count - 1];
        1:   41:    Storage[--Count] = NULL;
        1:   42:    if (Count == Capacity / 2)
        1:   42-block  0
    #####:   43:        Shrink();
    $$$$$:   43-block  0
        1:   44:    return PoppedElement;
        1:   44-block  0
        -:   45:}
        -:   46:
        -:   47:// Accessing the Storage
    14898:   48:TrenchCoat*& DynamicArray::operator[](int Index)
    14898:   48-block  0
        -:   49:{
    14898:   50:    if (Index < FIRST_INDEX || Index >= Count)
    14898:   50-block  0
    14898:   50-block  1
    #####:   51:        throw AppException();
    $$$$$:   51-block  0
    14898:   52:    return Storage[Index];
    14898:   52-block  0
        -:   53:}
        -:   54:
        -:   55:// Count getter
      259:   56:int DynamicArray::GetCount()
      259:   56-block  0
        -:   57:{
      259:   58:    return Count;
      259:   58-block  0
        -:   59:}
        -:   60:
        -:   61:// Dynamic Array storage management functions
        8:   62:void DynamicArray::Grow()
        8:   62-block  0
        -:   63:{
        8:   64:    Capacity *= 2;
        8:   65:    TrenchCoat** NewStorage = new TrenchCoat* [Capacity];
        8:   65-block  0
        8:   65-block  1
    $$$$$:   65-block  2
        8:   65-block  3
      608:   66:    for (int i = FIRST_INDEX; i < Count; i++)
      608:   66-block  0
      600:   66-block  1
      600:   67:        NewStorage[i] = Storage[i];
        8:   68:    delete Storage;
        8:   68-block  0
        8:   69:    Storage = NewStorage;
        8:   70:}
        -:   71:
    #####:   72:void DynamicArray::Shrink()
    $$$$$:   72-block  0
        -:   73:{
    #####:   74:    if (Count > Capacity / 2)
    $$$$$:   74-block  0
    #####:   75:        throw AppException();
    $$$$$:   75-block  0
    #####:   76:    Capacity /= 2;
    #####:   77:    TrenchCoat** NewStorage = new TrenchCoat * [Capacity];
    $$$$$:   77-block  0
    $$$$$:   77-block  1
    $$$$$:   77-block  2
    $$$$$:   77-block  3
    #####:   78:    for (int i = FIRST_INDEX; i < Count; i++)
    $$$$$:   78-block  0
    $$$$$:   78-block  1
    #####:   79:        NewStorage[i] = Storage[i];
    #####:   80:    delete Storage;
    $$$$$:   80-block  0
    #####:   81:    Storage = NewStorage;
    #####:   82:}
